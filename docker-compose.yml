version: '3.8'

services:
  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: myappdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d myappdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
      PGADMIN_LISTEN_PORT: 80
    depends_on:
      - postgres
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - app-network

  fastapi:
    build: .
    volumes:
      - ./:/myapp/
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: always

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
    networks:
      - app-network
    # restart: always

  # frontend:
  #   image: kaw393939/event_manager_frontend:latest
  #   depends_on:
  #     - fastapi
  #   volumes:
  #     - .:/frontend
  #     - /frontend/node_modules
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - app-network
  #   # restart: always

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 frontend
    # restart: always

  frontend:
      build:
        context: ./frontend
      depends_on:
        - fastapi
      volumes:
      - .:/frontend
      - /frontend/node_modules
      ports:
        - "3000:3000"
      networks:
        - app-network

volumes:
  postgres-data:
  pgadmin-data:

networks:
  app-network: